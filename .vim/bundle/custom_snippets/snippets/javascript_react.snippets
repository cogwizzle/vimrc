# Import react.
snippet react_import
	import React from 'react';
# Create new component.
snippet react_create
	export default class ${1:ComponentName} extends React.Component {
		
		/**
		 * Default constructor.
		 *
		 * @param {Object[]} props Tag properties.
		 */
		constructor(props) {
			super(props);
		}

		/**
		 * JSX based render function.
		 *
		 * @return {string} JSX DOM.
		 */
		render() {
			return (
				${2:<div>TODO implement function</div>}
			);
		}
	}
# Before mount.
snippet react_pre_mount
	/**
	 * Before component mounts.
	 */
	componentWillMount() {
		${2:// TODO implement.}
	}
# After mount.
snippet react_post_mount
	/**
	 * After component mounts.
	 */
	componentDidMount() {
		${2:// TODO implement.}
	}
# Before removed from dom.
snippet react_remove
	/**
	 * Before react is removed from DOM.
	 */
	componentWillUnmount() {
		${2:// TODO implement.}
	}
# React Redux Subscribe.
snippet react_redux_subscribe
	/**
	 * After component mounts.
	 */
	componentDidMount() {
		const {store} = this.context;
		this.unsubscribe = store.subscribe(() => {
			this.forceUpdate();
		});
	}

	/**
	 * Before react is removed from DOM.
	 */
	componentWillUnmount() {
		this.unsubscribe()
	}
# React Redux set up context from provider.
snippet react_redux_context
	${1:component_name}.contextTypes = {
		store: PropTypes.object
	};
snippet react_redux_context_import
	import PropTypes from 'prop-types';
