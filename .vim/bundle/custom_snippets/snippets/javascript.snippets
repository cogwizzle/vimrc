# Create javascript objects.
snippet reveal
	var ${1:name_of_class} = function(){
		${2}

		return {

		}
	}
# Log a variable.
snippet logVar
	console.log(`$1: `, ${1:var_name});
# Create getter and setter in ES6.
snippet es6_getset
	/**
	 * Get the ${1:lowercase_name_of_property} of ${2:name_of_class}.
	 *
	 * @return {${3:type_of_property}} $1 of $2.
	 */
	get $1() {
		return this._$1;
	}

	/**
	 * Set the $1 of $2.
	 *
	 * @param {$3} value $1 of $2.
	 */
	set $1(value) {
		this._$1 = value;
	}
# Create getter and setter.
snippet getset
	function get${1:upper_property_name}(){
		return ${2:lower_property_name};
	}

	function set$1(new$1){
		$2 = new$1;
	}
# Mirror JSON property.
snippet mirror
	"${1:name_of_property}" : $1,
# Notify all subscribers.
snippet notifyAll
	/**
	 * Notify all subscribers.
	 */
	function fire(){
		${1:subscribers}.forEach(function(item){
			item.notify(${2:notification});
		});
	}

	/**
	 * Subscribe to observable.
	 */
	function subscribe(subscriber){
		$1.push(subscriber);
	}

	/**
	 * Unsubscribe from observable.
	 */
	function unsubscribe(subscriber){
		$1 = $1.filter(
			function(item !== subscriber){
				return item
			}
		);
	}
# Notify as a subscriber
snippet notify
	/**
	 * Notify this subscriber.
	 */
	function notify(${1:argument}){
		${2://TODO implement function.}
	}
# Singleton pattern.
snippet singleton
	/**
	 * ${2:class_description}
	 *
	 * @see singleton
	 */
	var ${1:class_name} = (function(){
		var instance;

		/**
		 * Get singleton instance of object.
		 */
		function getInstance(){
			if(!instance){

				// Actual object implementation.
				instance = (function(){

					return {

					};
				})();
			}
			return instance;
		}

		return {
			"getInstance" : getInstance,
		}
	})();
# Settimeout
snippet setTimeout
	setTimeout(function(){
		${2:}
	}, ${1:1000});
# Fetch Json
snippet fetch_json
	fetch(${1:url}, ${2:fetchOptions})
		.then(function(response){
			return response.json();
		}).then(function(json){
			${3:// TODO implement promise.}
		});
# riot fab
snippet riot_fab
	riot.mount("${1:#anchor}", "floating-action-button", {
		"press" : ${2:functionName},
		"background_color" : "#4CAF50",
		"icon_class" : "${3:icon}",
	});
#es6 Param
snippet es6_param
	@param {${1:type_of_property}} ${2:property_name} ${3:description}
#es6 Class defnintion
snippet	es6_class
	/**
	 * Represents $1.
	 */
	export default class ${1:class_name} {
	
		/**
		 * Default constructor.
		 */
		constructor() {
			super();
		}
	}
#es6 With for builders
snippet es6_with
	/**
	 * Set the ${1:lower_property} property.
	 *
	 * @param new${2:capital_property} {${3:type}} $1.
	 * return this.
	 */
	with$2(new$2) {
		this.$1 = new$2;
		return this;
	}
